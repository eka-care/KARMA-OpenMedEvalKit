---
// CopyPageButton.astro
---

<div class="copy-page-container">
  <div class="button-group">
    <button id="copy-page-btn" class="copy-page-button" title="Copy page as Markdown for LLMs">
      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <rect width="14" height="14" x="8" y="8" rx="2" ry="2"></rect>
        <path d="M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2"></path>
      </svg>
      <span class="button-text">Copy page</span>
    </button>
    <button id="dropdown-trigger" class="dropdown-trigger" title="More options">
      <svg class="dropdown-arrow" xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <polyline points="6,9 12,15 18,9"></polyline>
      </svg>
    </button>
  </div>
  
  <div id="copy-dropdown" class="dropdown-menu" style="display: none;">
    <button class="dropdown-item" data-action="copy-markdown">
      <svg class="item-icon" xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <rect width="14" height="14" x="8" y="8" rx="2" ry="2"></rect>
        <path d="M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2"></path>
      </svg>
      <span>Copy page as Markdown for LLMs</span>
    </button>
    <button class="dropdown-item" data-action="view-markdown">
      <svg class="item-icon" xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
        <polyline points="14,2 14,8 20,8"></polyline>
        <line x1="16" y1="13" x2="8" y2="13"></line>
        <line x1="16" y1="17" x2="8" y2="17"></line>
        <polyline points="10,9 9,9 8,9"></polyline>
      </svg>
      <span>View as Markdown</span>
      <svg class="external-icon" xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"></path>
        <polyline points="15,3 21,3 21,9"></polyline>
        <line x1="10" y1="14" x2="21" y2="3"></line>
      </svg>
    </button>
    <button class="dropdown-item" data-ai="claude">
      <img class="item-icon claude-logo" src="/claude-logo.svg" alt="Claude" width="16" height="16" />
      <span>Open in Claude</span>
      <svg class="external-icon" xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"></path>
        <polyline points="15,3 21,3 21,9"></polyline>
        <line x1="10" y1="14" x2="21" y2="3"></line>
      </svg>
    </button>
    <button class="dropdown-item" data-ai="chatgpt">
      <img class="item-icon openai-logo" src="/openai-logo.svg" alt="ChatGPT" width="16" height="16" />
      <span>Open in ChatGPT</span>
      <svg class="external-icon" xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"></path>
        <polyline points="15,3 21,3 21,9"></polyline>
        <line x1="10" y1="14" x2="21" y2="3"></line>
      </svg>
    </button>
  </div>
</div>

<style>
  .copy-page-container {
    position: relative;
    display: inline-block;
  }

  .button-group {
    display: flex;
    align-items: stretch;
    border: 1px solid var(--sl-color-gray-5);
    border-radius: 0.375rem;
    overflow: hidden;
    background: var(--sl-color-bg-sidebar);
  }

  .copy-page-button {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 0.75rem;
    background: transparent;
    border: none;
    color: var(--sl-color-text);
    font-size: 0.875rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
    white-space: nowrap;
    flex: 1;
  }

  .dropdown-trigger {
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 0.5rem;
    background: transparent;
    border: none;
    border-left: 1px solid var(--sl-color-gray-5);
    color: var(--sl-color-text);
    cursor: pointer;
    transition: all 0.2s ease;
    min-width: 36px;
  }
  
  .button-group:hover {
    border-color: var(--sl-color-gray-4);
  }

  .copy-page-button:hover {
    background: var(--sl-color-gray-6);
  }
  
  .dropdown-trigger:hover {
    background: var(--sl-color-gray-6);
  }
  
  .copy-page-button:active,
  .dropdown-trigger:active {
    background: var(--sl-color-gray-5);
  }

  .button-group:active {
    transform: translateY(1px);
  }
  
  .copy-page-button svg {
    width: 16px;
    height: 16px;
    flex-shrink: 0;
  }

  .dropdown-arrow {
    width: 12px !important;
    height: 12px !important;
    transition: transform 0.2s ease;
  }

  .dropdown-trigger.open .dropdown-arrow {
    transform: rotate(180deg);
  }
  
  .button-text {
    display: inline;
  }

  .dropdown-menu {
    position: absolute;
    top: 100%;
    right: 0;
    margin-top: 0.5rem;
    background: var(--sl-color-bg-sidebar);
    border: 1px solid var(--sl-color-gray-5);
    border-radius: 0.5rem;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
    min-width: 200px;
    z-index: 1000;
    overflow: hidden;
  }

  .dropdown-header {
    padding: 0.75rem 1rem 0.5rem 1rem;
    font-size: 0.75rem;
    font-weight: 600;
    text-transform: uppercase;
    color: var(--sl-color-gray-3);
    letter-spacing: 0.05em;
  }

  .dropdown-item {
    display: flex;
    align-items: center;
    width: 100%;
    padding: 0.75rem 1rem;
    background: none;
    border: none;
    color: var(--sl-color-text);
    font-size: 0.875rem;
    font-weight: 400;
    cursor: pointer;
    transition: background-color 0.2s ease;
    text-align: left;
    gap: 0;
  }

  .dropdown-item:hover {
    background: var(--sl-color-gray-6);
  }

  .dropdown-item:active {
    background: var(--sl-color-gray-5);
  }

  .dropdown-item span {
    flex: 1;
  }

  .item-icon {
    width: 16px;
    height: 16px;
    flex-shrink: 0;
    margin-right: 0.5rem;
  }

  .claude-logo {
    filter: brightness(0) saturate(100%) invert(50%) sepia(0%) saturate(0%) hue-rotate(0deg) brightness(50%) contrast(100%);
  }

  .openai-logo {
    filter: brightness(0) saturate(100%) invert(50%) sepia(0%) saturate(0%) hue-rotate(0deg) brightness(50%) contrast(100%);
  }

  .external-icon {
    width: 12px;
    height: 12px;
    flex-shrink: 0;
    opacity: 0.6;
    margin-left: 0.5rem;
  }

  .dropdown-divider {
    border: none;
    border-top: 1px solid var(--sl-color-gray-5);
    margin: 0.5rem 0;
  }
  
  @media (max-width: 768px) {
    .button-text {
      display: none;
    }

    .dropdown-menu {
      right: 0;
      left: auto;
      min-width: 180px;
    }
  }
</style>

<script>
  function initCopyPageButton() {
    const copyPageButton = document.getElementById('copy-page-btn');
    const dropdownTrigger = document.getElementById('dropdown-trigger');
    const dropdown = document.getElementById('copy-dropdown');
    if (!copyPageButton || !dropdownTrigger || !dropdown) return;

    // Handle main copy button click
    copyPageButton.addEventListener('click', async (e) => {
      e.stopPropagation();
      await handleMarkdownAction('copy-markdown');
    });

    // Toggle dropdown on trigger click
    dropdownTrigger.addEventListener('click', (e) => {
      e.stopPropagation();
      const isOpen = dropdown.style.display !== 'none';
      
      if (isOpen) {
        dropdown.style.display = 'none';
        dropdownTrigger.classList.remove('open');
      } else {
        dropdown.style.display = 'block';
        dropdownTrigger.classList.add('open');
      }
    });

    // Close dropdown when clicking outside
    document.addEventListener('click', (e) => {
      const container = document.querySelector('.copy-page-container');
      if (container && !container.contains(e.target)) {
        dropdown.style.display = 'none';
        dropdownTrigger.classList.remove('open');
      }
    });

    // Handle dropdown item clicks
    dropdown.addEventListener('click', async (e) => {
      const item = e.target.closest('.dropdown-item');
      if (!item) return;

      const aiType = item.getAttribute('data-ai');
      const action = item.getAttribute('data-action');

      if (action === 'copy-markdown' || action === 'view-markdown') {
        await handleMarkdownAction(action);
      } else if (aiType) {
        await handleAIAction(aiType);
      }

      // Close dropdown after action
      dropdown.style.display = 'none';
      dropdownTrigger.classList.remove('open');
    });
  }

  async function handleMarkdownAction(action) {
    try {
      const content = await getPageContent();
      
      if (action === 'copy-markdown') {
        await navigator.clipboard.writeText(content);
        showFeedback('Copied to clipboard!');
      } else if (action === 'view-markdown') {
        // Open in new tab with markdown preview
        const blob = new Blob([content], { type: 'text/plain' });
        const url = URL.createObjectURL(blob);
        window.open(url, '_blank');
      }
    } catch (error) {
      console.error('Failed to handle markdown action:', error);
      showFeedback('Failed to process content');
    }
  }

  async function handleAIAction(aiType) {
    try {
      const currentUrl = window.location.href;
      
      let aiUrl;
      let shouldCopyContent = true;
      
      switch (aiType) {
        case 'claude':
          // For Claude, use the new URL format with the page URL as parameter
          const prompt = `Read from ${currentUrl} so I can ask questions about it`;
          aiUrl = `https://claude.ai/new?q=${encodeURIComponent(prompt)}`;
          shouldCopyContent = false;
          break;
        case 'chatgpt':
          const chatgptPrompt = `Read from ${currentUrl} so I can ask questions about it`;
          aiUrl = `https://chat.openai.com/?q=${encodeURIComponent(chatgptPrompt)}`;
          shouldCopyContent = false;
          break;
        case 'copilot':
          aiUrl = 'https://copilot.microsoft.com';
          break;
        default:
          const defaultPrompt = `Read from ${currentUrl}`;
          aiUrl = `https://claude.ai/new?q=${encodeURIComponent(defaultPrompt)}`;
          shouldCopyContent = false;
      }
      
      // For non-Claude services, copy content to clipboard
      if (shouldCopyContent) {
        const content = await getPageContent();
        const pageTitle = document.title;
        const aiPrompt = `Here's the content from the documentation page "${pageTitle}" (${currentUrl}):\n\n${content}`;
        await navigator.clipboard.writeText(aiPrompt);
        showFeedback(`Content copied! Opening ${aiType}...`);
      } else {
        showFeedback(`Opening ${aiType}...`);
      }
      
      window.open(aiUrl, '_blank');
      
    } catch (error) {
      console.error('Failed to handle AI action:', error);
      showFeedback('Failed to process content');
    }
  }

  async function getPageContent() {
    const article = document.querySelector('main');
    if (!article) {
      throw new Error('No main element found');
    }

    // Extract text content and preserve basic formatting
    let content = '';
    const walker = document.createTreeWalker(
      article,
      NodeFilter.SHOW_TEXT | NodeFilter.SHOW_ELEMENT,
      {
        acceptNode: function(node) {
          // Skip script and style elements
          if (node.nodeType === Node.ELEMENT_NODE) {
            const tagName = node.tagName.toLowerCase();
            if (tagName === 'script' || tagName === 'style') {
              return NodeFilter.FILTER_REJECT;
            }
          }
          return NodeFilter.FILTER_ACCEPT;
        }
      }
    );

    let currentNode;
    while (currentNode = walker.nextNode()) {
      if (currentNode.nodeType === Node.TEXT_NODE) {
        const text = currentNode.textContent?.trim();
        if (text) {
          content += text + ' ';
        }
      } else if (currentNode.nodeType === Node.ELEMENT_NODE) {
        const tagName = currentNode.tagName.toLowerCase();
        // Add line breaks for block elements
        if (['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'p', 'div', 'li'].includes(tagName)) {
          if (content && !content.endsWith('\n')) {
            content += '\n';
          }
        }
        // Add extra line breaks for headings
        if (['h1', 'h2', 'h3', 'h4', 'h5', 'h6'].includes(tagName)) {
          content += '\n';
        }
      }
    }

    // Clean up the content
    content = content
      .replace(/\n\s*\n\s*\n/g, '\n\n') // Remove excessive line breaks
      .replace(/^\s+|\s+$/g, '') // Trim start and end
      .replace(/ +/g, ' '); // Remove excessive spaces

    if (!content) {
      throw new Error('No content found');
    }

    return content;
  }

  function showFeedback(message) {
    const copyPageButton = document.getElementById('copy-page-btn');
    const textElement = copyPageButton?.querySelector('.button-text');
    if (!textElement) return;

    const originalText = textElement.textContent;
    textElement.textContent = message;
    setTimeout(() => {
      textElement.textContent = originalText || 'Copy page';
    }, 2000);
  }

  // Initialize when DOM is loaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initCopyPageButton);
  } else {
    initCopyPageButton();
  }

  // Re-initialize on page navigation (for SPA behavior)
  document.addEventListener('astro:page-load', initCopyPageButton);
</script>